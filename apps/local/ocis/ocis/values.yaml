image:
  repository: owncloud/ocis
  tag: "1.19.1"
  sha: "3fdde158afabac6ec540756f651a59892baf2c9a2b2b03e82fddeb34fa83374b"
  pullPolicy: IfNotPresent

logging:
  level: "error"
  pretty: "false"
  color: "false"

deploymentStrategy:
  type: RollingUpdate

externalDomain: ocis.owncloud.test

ingress:
  enabled: false
  #ingressClassName: nginx
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - ocis.owncloud.test


secrets:
  #TODO: https://github.com/owncloud/ocis-charts/issues/9
  jwt: replace-me-with-a-real-secret-123
  machineAuth: replace-me-with-a-real-secret-456
  transfer: replace-me-with-a-real-secret-789

# Apply extra labels to common labels.
extraLabels: {}

## Override the deployment namespace
##
namespaceOverride: ""

storageMetadata:
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteMany
    size: 5Gi
    annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    selectorLabels: {}
    # existingClaim:

storageSharing:
  #TODO: https://github.com/owncloud/ocis-charts/issues/10
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteMany
    size: 5Gi
    annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    selectorLabels: {}
    # existingClaim:

storageUsers:
  storageBackend:
    driver: ocis # stores all data in the persistent volume if persistence is enabled
    # driver: s3ng # stores all metadata in the persistent volume and uploads blobs to s3 if persistence is enabled
    # driverConfig:
    #   s3ng:
    #     endpoint: https://localhost:1234
    #     region: default
    #     bucket: example-bucket
    #     accessKey: lorem-ipsum
    #     secretKey: lorem-ipsum
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteMany
    size: 50Gi
    annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    selectorLabels: {}
    # existingClaim:

store:
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteMany
    size: 5Gi
    annotations: {}
    finalizers:
      - kubernetes.io/pvc-protection
    selectorLabels: {}
    # existingClaim:

thumbnails:
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteMany
    size: 10Gi
    annotations: {}
    finalizers: []
    selectorLabels: {}
    # existingClaim:


# global options for scalable service
replicas: 1

## Create HorizontalPodAutoscaler object for deployment type
#
autoscaling:
  enabled: false
#   minReplicas: 1
#   maxReplicas: 10
#   metrics:
#   - type: Resource
#     resource:
#       name: cpu
#       targetAverageUtilization: 60
#   - type: Resource
#     resource:
#       name: memory
#       targetAverageUtilization: 60

# currently resources are globally applied to all services if

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Include arbitrary resources, eg. config maps or a cer-manager issuer (see example below)
extraResources: []
#  - |
#    apiVersion: cert-manager.io/v1alpha2
#    kind: Issuer
#    metadata:
#      name: ocis-certificate-issuer
#      namespace: ocis
#    spec:
#      acme:
#        server: https://acme-v02.api.letsencrypt.org/directory
#        email: test@example.com
#        privateKeySecretRef:
#          name: ocis-certificate-issuer
#        solvers:
#        - http01:
#            ingress:
#              class: nginx
